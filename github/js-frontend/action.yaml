name: Docker Build and Push
description: Build the JavaScript frontend
inputs:
  run_number:
    required: true
    description: The GitHub Actions Workflow run number
  dockerhub_username:
    description: 'The dockerhub username'
    required: true
  dockerhub_password:
    description: 'The dockerhub password'
    required: true
  codefresh_token:
    description: 'The codefresh token'
    required: true
  github_codefresh_token:
    description: 'The github codefresh token'
    required: true    

runs:
  using: "composite"
  steps:
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        platforms: linux/amd64,linux/arm64

    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ inputs.dockerhub_username }}
        password: ${{ inputs.dockerhub_password }}

    - name: Clone code repo
      uses: actions/checkout@v2

    - uses: actions/setup-node@v3
      with:
        node-version: 14
        cache: 'npm'
        cache-dependency-path: js/frontend/yarn.lock

    - name: Get branch name
      id: branch-name
      uses: tj-actions/branch-names@v7

    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0.9.15
      with:
        versionSpec: 5.x

    - id: determine_version
      name: Determine Version
      uses: gittools/actions/gitversion/execute@v0.9.15
      with:
        additionalArguments: /overrideconfig mode=Mainline
    - name: Install modules
      run: yarn install
      shell: bash
      working-directory: js/frontend

    - name: Instance CycloneDX
      run: npm install --global @cyclonedx/cyclonedx-npm
      shell: bash

    # This step generates a Source Bill of Materials (SBOM) package that captures all the dependencies compiled
    # into the application.
    - name: Generate SBOM
      run: cyclonedx-npm --ignore-npm-errors --output-file bom.json
      shell: bash
      working-directory: js/frontend

    - name: Set version
      run: |
        jq '.frontendVersion = "v${{ steps.determine_version.outputs.semVer }}"' config.json > /tmp/config.json
        mv /tmp/config.json config.json
      shell: bash
      working-directory: js/frontend/public

    - name: Build App
      run: yarn run build
      shell: bash
      working-directory: js/frontend

    # The Docker image is built and pushed.
 #   - name: Build, tag, and push image to Dockerhub
 #     run: |
 #       docker build -t twerthi/octopub-frontend:${{ steps.determine_version.outputs.semVer }} .
 #       docker push twerthi/octopub-frontend:${{ steps.determine_version.outputs.semVer }}
 #       docker tag  twerthi/octopub-frontend:${{ steps.determine_version.outputs.semVer }} twerthi/octopub-frontend:latest
 #       docker push twerthi/octopub-frontend:latest
 #     shell: bash
 #     working-directory: js/frontend

    # The MySQL Docker image is built and pushed.
    - name: Build, tag, and push image to Dockerhub
      run: |
        docker buildx build -f Dockerfile -t twerthi/octopub-frontend:${{ steps.determine_version.outputs.semVer }} -t twerthi/octopub-frontend:latest --platform=linux/amd64,linux/arm64 --push .
      shell: bash
      working-directory: js/frontend

    - name: Install Cypress modules
      run: npm install
      shell: bash
      working-directory: js/cypress-frontend

    - name: report image by action
      with:
        # Name of runtime to implement the enrichment
        CF_RUNTIME_NAME: 'codefresh-clusterpi'

        # Codefresh API key !! Committing a plain text token is a security risk. We highly recommend using encrypted secrets. !!
        # Documentation - https://docs.github.com/en/actions/security-guides/encrypted-secrets
        CF_API_KEY: ${{ inputs.codefresh_token }}

        # Name of Container registry integration
        CF_CONTAINER_REGISTRY_INTEGRATION: 'twerthi-dockerhub'

        # The git branch which is related for the commit
        CF_GIT_BRANCH: ${{ github.ref_name }}

        # Image path to enrich 
        CF_IMAGE: docker.io/${{ inputs.dockerhub_username }}/octopub-frontend:${{ steps.determine_version.outputs.semVer }}

        # GitHub Access token !! Committing a plain text token is a security risk. We highly recommend using encrypted secrets. !!
        # Documentation - https://docs.github.com/en/actions/security-guides/encrypted-secrets
        CF_GITHUB_TOKEN: ${{ inputs.github_codefresh_token }}    

        # # Name of Jira integration
        # # Name of Jira integration
        CF_ISSUE_TRACKING_INTEGRATION: 'twerthi-jira' 

        # # String starting with the issue ID to associate with image
        CF_JIRA_MESSAGE: 'OC-1'

        # # Jira project filter
        CF_JIRA_PROJECT_PREFIX: "OC"
      uses: codefresh-io/codefresh-report-image@latest

    - name: Push build information to Octopus Deploy üêô
      uses: OctopusDeploy/push-build-information-action@v3
      with:
        packages: |
          twerthi/octopub-frontend
        version: ${{ steps.determine_version.outputs.semVer }}
        server: ${{ inputs.octopus_server_url }}
        api_Key: ${{ inputs.octopus_api_key }}
        space: ${{ inputs.octopus_space }}      
